// CastleBoard Code
#include <Arduino.h>
#include <Wire.h>

const byte CASTLE_ID = 1; // Change this for each CastleBoard: 1 to 4
const int DE_PIN = 2; // RS485 DE pin
const byte START_BYTE = 0xAA;
const byte END_BYTE = 0xBB;
const byte MOTOR_BASE_ADDR = 0x08; // MotorBoards from 0x08 to 0x12 (11 boards)
const byte NUM_MOTOR_BOARDS = 11;

byte pot_values[22]; // 11 boards * 2 channels

void processCommand(byte cmd, byte len, byte* data);
void fetchAllPots();
void setMotorTarget(byte motor_index, byte value);
void sendResponse(byte id, byte cmd, byte len, byte* data);

void setup() {
  Serial.begin(9600); // RS485 baud rate
  pinMode(DE_PIN, OUTPUT);
  digitalWrite(DE_PIN, LOW); // Receive mode by default

  Wire.begin(); // I2C master for MotorBoards
}

void loop() {
  if (Serial.available() > 0) {
    byte incoming = Serial.read();
    if (incoming == START_BYTE) {
      byte id = Serial.read();
      if (id == CASTLE_ID) {
        byte cmd = Serial.read();
        byte len = Serial.read();
        byte data[22]; // Max len for pots
        for (byte i = 0; i < len; i++) {
          data[i] = Serial.read();
        }
        byte checksum = Serial.read();
        byte end = Serial.read();

        byte calc_checksum = id ^ cmd ^ len;
        for (byte i = 0; i < len; i++) {
          calc_checksum ^= data[i];
        }

        if (end == END_BYTE && checksum == calc_checksum) {
          processCommand(cmd, len, data);
        }
      }
    }
  }
}

void processCommand(byte cmd, byte len, byte* data) {
  if (cmd == 1) { // Get all pots
    fetchAllPots();
    sendResponse(CASTLE_ID, 1, 22, pot_values);
  } else if (cmd == 2 && len == 2) { // Set target
    byte motor_index = data[0]; // 0-21
    byte value = data[1]; // 0-99
    setMotorTarget(motor_index, value);
    sendResponse(CASTLE_ID, 2, 0, NULL);
  }
}

void fetchAllPots() {
  for (byte board = 0; board < NUM_MOTOR_BOARDS; board++) {
    byte addr = MOTOR_BASE_ADDR + board;
    Wire.requestFrom(addr, (byte)4);
    if (Wire.available() == 4) {
      byte ch1 = Wire.read();
      byte p1 = Wire.read();
      byte ch2 = Wire.read();
      byte p2 = Wire.read();
      if (ch1 == 1 && ch2 == 2) {
        pot_values[board * 2] = p1;
        pot_values[board * 2 + 1] = p2;
      }
    }
  }
}

void setMotorTarget(byte motor_index, byte value) {
  byte board = motor_index / 2;
  byte channel = (motor_index % 2) + 1;
  byte addr = MOTOR_BASE_ADDR + board;
  Wire.beginTransmission(addr);
  Wire.write(channel);
  Wire.write(value);
  Wire.endTransmission();
}

void sendResponse(byte id, byte cmd, byte len, byte* data) {
  digitalWrite(DE_PIN, HIGH);
  Serial.write(START_BYTE);
  Serial.write(id);
  Serial.write(cmd);
  Serial.write(len);
  byte checksum = id ^ cmd ^ len;
  for (byte i = 0; i < len; i++) {
    Serial.write(data[i]);
    checksum ^= data[i];
  }
  Serial.write(checksum);
  Serial.write(END_BYTE);
  Serial.flush();
  digitalWrite(DE_PIN, LOW);
}